### Refactoring- improving the Design of the existing code

1.	When you have to add a feature to a program but the code is not structured in
a convenient way, first refactor the program to make it easy to add the feature, then
add the feature.

2.	Before you start refactoring, make sure you have a solid suite of tests. These
tests must be self­checking.

3.	Before you start refactoring, make sure you have a solid suite of tests. These
tests must be self­checking.

4.	Any fool can write code that a computer can understand. Good programmers
write code that humans can understand

5.	When programming, follow the camping rule: Always leave the code base
healthier than when you found it.

6.	The true test of good code is how easy it is to change it

7.	If someone says their code was broken for a couple of days while they are
refactoring, you can be pretty sure they were not refactoring.

8.	You have to refactor when you run into ugly code—but excellent code needs
plenty of refactoring too.

9.	The whole purpose of refactoring is to make us program faster, producing
more value with less effort


10.	The longer I work on an isolated
branch, the harder the job of integrating my work with mainline is going to be when I’m
done. Most people reduce this pain by frequently merging or re­basing from mainline
to my branch

11. One difference from regular refactorings is that database changes often are best
separated over multiple releases to production. This makes it easy to reverse any
change that causes a problem in production.


12.	Deciding when to start refactoring—and when to stop—is
just as important to refactoring as knowing how to operate the mechanics of it

13. Sharter the funcation easy to understand

14.	Parameter list to a function:- If you can obtain one parameter by asking another parameter for it, you can use
Replace Parameter with Query (324) to remove the second parameter.

15. it’s good to limit variable scope as much as possible by moving it within a class or module where only that module’s code can see it.
16.	When you feel the need to write a comment, first try to refactor the code so
that any comment becomes superfluous.
17. Make sure all tests are fully automatic and that they check their own results.
18.	A suite of tests is a powerful bug detector that decapitates the time it takes to
find bugs.
19.	Always make sure a test will fail when it should.

20. Run tests frequently. Run those exercising the code you’re working on at least
every few minutes; run all tests at least daily.

21.	It is better to write and run incomplete tests than not to run complete tests.

22.	Think of the boundary conditions under which things might go wrong and
concentrate your tests there.

23.	Don’t let the fear that testing can’t catch all bugs stop you from writing tests
that catch most bugs

24.	When you get a bug report, start by writing a unit test that exposes the bug.

FORMAT OF THE REFACTORINGS

*   I begin with a name. The name is important to building a vocabulary of
refactorings. This is the name I use elsewhere in the book. Refactorings often go by
different names now, so I also list any aliases that seem to be common.
*   I follow the name with a short sketch of the refactoring. This helps you find a
refactoring more quickly.
*   The motivation describes why the refactoring should be done and describes
circumstances in which it shouldn’t be done.
*   The mechanics are a concise, step­by­step description of how to carry out the
refactoring.
*   The examples show a very simple use of the refactoring to illustrate how it works

A First Set of refactring

1.  Extracting Code into a method
2.  Group similar function in to a classh
3.  Create a new function, and name it after the intent of the function (name it by what
it does, not by how it does it)
4.  If a variable is only used inside the extracted code but is declared outside, move the
declaration into the extracted code.
5.  Compile after all variables are dealt with.
6.  Replace the extracted code in the source function with a call to the target function.


*   Ensure that the expression you want to extract does not have side effects.
*   Declare an immutable variable. Set it to a copy of the expression you want to name.
*   Replace the original expression with the new variable.

Pending Chaper 8
